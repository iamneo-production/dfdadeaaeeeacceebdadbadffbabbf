{"version":3,"sources":["components/Stopwatch/Stopwatch.jsx","App.js","reportWebVitals.js","index.js"],"names":["Stopwatch","props","_useState","useState","_useState2","_slicedToArray","time","setTime","_useState3","_useState4","isActive","setIsActive","_useState5","_useState6","isPaused","setIsPaused","increment","useRef","_jsx","className","children","_jsxs","id","hours","concat","Math","floor","slice","minutes","seconds","formatTime","onClick","current","setInterval","clearInterval","disabled","App","style","display","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"gPAGe,SAASA,EAAUC,GAChC,IAAAC,EAAwBC,mBAAS,GAAEC,EAAAC,YAAAH,EAAA,GAA5BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GACpBI,EAAgCL,oBAAS,GAAMM,EAAAJ,YAAAG,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,EAAgCT,oBAAS,GAAMU,EAAAR,YAAAO,EAAA,GAAxCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GACtBG,EAAYC,iBAAO,MAqCzB,OACEC,cAAA,WAASC,UAAU,aAAYC,SAC7BC,eAAA,OAAKF,UAAU,QAAOC,SAAA,CACpBF,cAAA,MAAAE,SAAI,sBAEJF,cAAA,KAAGI,GAAG,OAAO,cAAY,OAAMF,SAxClB,SAACd,GAClB,IAAMiB,EAAQ,IAAAC,OAAIC,KAAKC,MAAMpB,EAAO,OAAUqB,OAAO,GAC/CC,EAAU,IAAAJ,OAAIC,KAAKC,MAAMpB,EAAO,KAAS,IAAKqB,OAAO,GACrDE,EAAU,IAAAL,OAAIC,KAAKC,MAAMpB,EAAO,KAAQ,IAAKqB,OAAO,GAC1D,MAAM,GAANH,OAAUD,EAAK,OAAAC,OAAMI,EAAO,OAAAJ,OAAMK,EACpC,CAoCSC,CAAWxB,KAGde,eAAA,OAAKF,UAAU,UAASC,SAAA,CACpBV,GAAaI,EAIVA,EAKHI,cAAA,UAAQ,cAAY,SAASa,QAjClB,WACnBhB,GAAaD,GACbE,EAAUgB,QAAUC,aAAY,WAC9B1B,GAAQ,SAACD,GAAI,OAAKA,EAAO,GAAI,GAC/B,GAAG,IACL,EA4B6Dc,SAAC,WAJpDF,cAAA,UAAQ,cAAY,QAAQa,QAlClB,WAClBG,cAAclB,EAAUgB,SACxBjB,GAAaD,EACf,EA+B2DM,SAAC,UAJlDF,cAAA,UAAQa,QAvCE,WAClBpB,GAAY,GACZI,GAAY,GAEZC,EAAUgB,QAAUC,aAAY,WAC9B1B,GAAQ,SAACD,GAAI,OAAKA,EAAO,GAAI,GAC/B,GAAG,IACL,EAgCwC,cAAY,QAAOc,SAAC,UAapDF,cAAA,UACEI,GAAG,QACH,cAAY,QACZS,QAlCU,WAClBG,cAAclB,EAAUgB,SACxBrB,GAAY,GACZI,GAAY,GACZR,EAAQ,EACV,EA8BU4B,UAAWzB,EAASU,SACrB,iBAOX,CCpEegB,MATf,WACE,OACEf,eAAA,OAAKF,UAAU,MAAKC,SAAA,CAClBF,cAAA,KAAGmB,MAAO,CAACC,QAAQ,QAAQlB,SAAC,qBAC5BF,cAAClB,EAAS,MAGhB,ECEeuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,SAAAC,GAAkD,IAA/CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EACV,GAEJ,ECJAS,IAASC,OACPhC,cAACiC,IAAMC,WAAU,CAAAhC,SACfF,cAACkB,EAAG,MAENiB,SAASC,eAAe,SAM1Bf,G","file":"static/js/main.1b6ceda0.chunk.js","sourcesContent":["import React, { useState, useRef } from \"react\";\n//import \"/home/coder/project/workspace/reactapp/src/App.css\";\nimport \"./Stopwatch.css\";\nexport default function Stopwatch(props) {\n  const [time, setTime] = useState(0);\n  const [isActive, setIsActive] = useState(false);\n  const [isPaused, setIsPaused] = useState(false);\n  const increment = useRef(null);\n\n  const formatTime = (time) => {\n    const hours = `0${Math.floor(time / 360000)}`.slice(-2);\n    const minutes = `0${Math.floor(time / 60000) % 60}`.slice(-2);\n    const seconds = `0${Math.floor(time / 1000) % 60}`.slice(-2);\n    return `${hours} : ${minutes} : ${seconds}`;\n  };\n\n  const handleStart = () => {\n    setIsActive(true);\n    setIsPaused(false);\n\n    increment.current = setInterval(() => {\n      setTime((time) => time + 1000);\n    }, 1000);\n  };\n\n  const handlePause = () => {\n    clearInterval(increment.current);\n    setIsPaused(!isPaused);\n  };\n\n  const handleResume = () => {\n    setIsPaused(!isPaused);\n    increment.current = setInterval(() => {\n      setTime((time) => time + 1000);\n    }, 1000);\n  };\n\n  const handleReset = () => {\n    clearInterval(increment.current);\n    setIsActive(false);\n    setIsPaused(false);\n    setTime(0);\n  };\n\n  return (\n    <section className=\"stop-watch\">\n      <div className=\"inner\">\n        <h1> React Stopwatch </h1>\n\n        <p id=\"time\" data-testid=\"time\">\n          {formatTime(time)}\n        </p>\n\n        <div className=\"buttons\">\n          {!isActive && !isPaused ? (\n            <button onClick={handleStart} data-testid=\"start\">\n              Start\n            </button>\n          ) : !isPaused ? (\n            <button data-testid=\"pause\" onClick={handlePause}>\n              Pause\n            </button>\n          ) : (\n            <button data-testid=\"resume\" onClick={handleResume}>\n              Resume\n            </button>\n          )}\n\n          <button\n            id=\"reset\"\n            data-testid=\"reset\"\n            onClick={handleReset}\n            disabled={!isActive}\n          >\n            Reset\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}\n","import './App.css';\nimport Stopwatch from './components/Stopwatch/Stopwatch';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p style={{display:'none'}}>learn react link</p>\n      <Stopwatch />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}